/*
Copyright 2018 The Kubernetes Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "foremast.ai/foremast/foremast-barrelman/pkg/apis/deployment/v1alpha1"
	scheme "foremast.ai/foremast/foremast-barrelman/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// DeploymentMetadatasGetter has a method to return a DeploymentMetadataInterface.
// A group's client should implement this interface.
type DeploymentMetadatasGetter interface {
	DeploymentMetadatas(namespace string) DeploymentMetadataInterface
}

// DeploymentMetadataInterface has methods to work with DeploymentMetadata resources.
type DeploymentMetadataInterface interface {
	Create(*v1alpha1.DeploymentMetadata) (*v1alpha1.DeploymentMetadata, error)
	Update(*v1alpha1.DeploymentMetadata) (*v1alpha1.DeploymentMetadata, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.DeploymentMetadata, error)
	List(opts v1.ListOptions) (*v1alpha1.DeploymentMetadataList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.DeploymentMetadata, err error)
	DeploymentMetadataExpansion
}

// deploymentMetadatas implements DeploymentMetadataInterface
type deploymentMetadatas struct {
	client rest.Interface
	ns     string
}

// newDeploymentMetadatas returns a DeploymentMetadatas
func newDeploymentMetadatas(c *DeploymentV1alpha1Client, namespace string) *deploymentMetadatas {
	return &deploymentMetadatas{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the deploymentMetadata, and returns the corresponding deploymentMetadata object, and an error if there is any.
func (c *deploymentMetadatas) Get(name string, options v1.GetOptions) (result *v1alpha1.DeploymentMetadata, err error) {
	result = &v1alpha1.DeploymentMetadata{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("deploymentmetadatas").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of DeploymentMetadatas that match those selectors.
func (c *deploymentMetadatas) List(opts v1.ListOptions) (result *v1alpha1.DeploymentMetadataList, err error) {
	result = &v1alpha1.DeploymentMetadataList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("deploymentmetadatas").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested deploymentMetadatas.
func (c *deploymentMetadatas) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("deploymentmetadatas").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a deploymentMetadata and creates it.  Returns the server's representation of the deploymentMetadata, and an error, if there is any.
func (c *deploymentMetadatas) Create(deploymentMetadata *v1alpha1.DeploymentMetadata) (result *v1alpha1.DeploymentMetadata, err error) {
	result = &v1alpha1.DeploymentMetadata{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("deploymentmetadatas").
		Body(deploymentMetadata).
		Do().
		Into(result)
	return
}

// Update takes the representation of a deploymentMetadata and updates it. Returns the server's representation of the deploymentMetadata, and an error, if there is any.
func (c *deploymentMetadatas) Update(deploymentMetadata *v1alpha1.DeploymentMetadata) (result *v1alpha1.DeploymentMetadata, err error) {
	result = &v1alpha1.DeploymentMetadata{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("deploymentmetadatas").
		Name(deploymentMetadata.Name).
		Body(deploymentMetadata).
		Do().
		Into(result)
	return
}

// Delete takes name of the deploymentMetadata and deletes it. Returns an error if one occurs.
func (c *deploymentMetadatas) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("deploymentmetadatas").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *deploymentMetadatas) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("deploymentmetadatas").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched deploymentMetadata.
func (c *deploymentMetadatas) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.DeploymentMetadata, err error) {
	result = &v1alpha1.DeploymentMetadata{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("deploymentmetadatas").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
