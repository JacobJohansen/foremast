/*
Copyright 2018 The Kubernetes Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "foremast.ai/foremast/foremast-barrelman/pkg/apis/deployment/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeploymentMetadataLister helps list DeploymentMetadatas.
type DeploymentMetadataLister interface {
	// List lists all DeploymentMetadatas in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DeploymentMetadata, err error)
	// DeploymentMetadatas returns an object that can list and get DeploymentMetadatas.
	DeploymentMetadatas(namespace string) DeploymentMetadataNamespaceLister
	DeploymentMetadataListerExpansion
}

// deploymentMetadataLister implements the DeploymentMetadataLister interface.
type deploymentMetadataLister struct {
	indexer cache.Indexer
}

// NewDeploymentMetadataLister returns a new DeploymentMetadataLister.
func NewDeploymentMetadataLister(indexer cache.Indexer) DeploymentMetadataLister {
	return &deploymentMetadataLister{indexer: indexer}
}

// List lists all DeploymentMetadatas in the indexer.
func (s *deploymentMetadataLister) List(selector labels.Selector) (ret []*v1alpha1.DeploymentMetadata, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeploymentMetadata))
	})
	return ret, err
}

// DeploymentMetadatas returns an object that can list and get DeploymentMetadatas.
func (s *deploymentMetadataLister) DeploymentMetadatas(namespace string) DeploymentMetadataNamespaceLister {
	return deploymentMetadataNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeploymentMetadataNamespaceLister helps list and get DeploymentMetadatas.
type DeploymentMetadataNamespaceLister interface {
	// List lists all DeploymentMetadatas in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DeploymentMetadata, err error)
	// Get retrieves the DeploymentMetadata from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DeploymentMetadata, error)
	DeploymentMetadataNamespaceListerExpansion
}

// deploymentMetadataNamespaceLister implements the DeploymentMetadataNamespaceLister
// interface.
type deploymentMetadataNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeploymentMetadatas in the indexer for a given namespace.
func (s deploymentMetadataNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DeploymentMetadata, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeploymentMetadata))
	})
	return ret, err
}

// Get retrieves the DeploymentMetadata from the indexer for a given namespace and name.
func (s deploymentMetadataNamespaceLister) Get(name string) (*v1alpha1.DeploymentMetadata, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("deploymentmetadata"), name)
	}
	return obj.(*v1alpha1.DeploymentMetadata), nil
}
